name: "Upload to CDN"
description: "Upload static assets to CDN"
inputs:
  team-name:
    description: "CDN team name"
    required: true
  source:
    description: "Source directory"
    required: true
  destination:
    description: "Destination directory"
    required: true
  cache-invalidation:
    description: "Cache invalidation"
    required: false
    default: "false"
  no-cache-paths:
    description: "Comma separated list of paths that should not be cached"
    required: false
    default: ""
  nais_management_project_id:
    required: true
  nais_workload_identity_provider:
    required: true

outputs:
  uploaded:
    description: "Uploaded files"
    value: ${{ steps.upload-file.outputs.uploaded }}
runs:
  using: "composite"
  steps:
    - id: "cdn"
      shell: bash
      run: |
        if [ -z "${{ inputs.team-name }}" ]; then
          echo "::error ::team not set. Please provide as input."
          exit 1
        fi

        function slugify() {
          slug=${{ inputs.team-name }}
          prefix="$1"
          maxLength=30

          hash=$(echo -n "$slug" | sha256sum | cut -d ' ' -f 1)

          prefixLength=${#prefix}
          hashLength=4
          slugLength=$((maxLength - prefixLength - hashLength - 2))

          # Remove hyphens only if they are at the end after truncation
          truncatedSlug=$(echo -n "${slug:0:$slugLength}" | sed 's/-\}$//')

          # Generate a new truncated hash for each call
          truncatedHash=$(echo -n "$hash" | head -c $hashLength)

          echo "$truncatedSlug-$truncatedHash"
        }


        function slugifyBucket() {
          slug="$1"

          hash=$(echo -n "$slug" | sha256sum | cut -d ' ' -f 1)

          hashLength=4

          # Remove hyphens only if they are at the end after truncation
          truncatedSlug=$(echo -n $slug | sed 's/-\}$//')

          # Generate a new truncated hash for each call
          truncatedHash=$(echo -n "$hash" | head -c $hashLength)

          echo "$truncatedSlug-$truncatedHash"
        }

        echo "LOGICAL_NAME=nais-cdn" >> $GITHUB_ENV
        slugify "cdn"
        slug_result=$(slugify "cdn")
        echo "SA_EMAIL=cdn-$slug_result@${{ inputs.nais_management_project_id }}.iam.gserviceaccount.com" >> $GITHUB_ENV

        # TODO: tenant-domain is currently hard-coded
        # nais-cdn-{replace(tenant-domain, '.', '-')}-{team-name}-{hash}
        slugifyBucket "nav-${{ inputs.team-name }}"
        slug_result=$(slugifyBucket "nav-${{ inputs.team-name }}")
        echo "BUCKET_NAME=nais-cdn-$slug_result" >> $GITHUB_ENV
    # Authenticate with Google Cloud using Workload Identity Federation
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v2.1.0"
      with:
        workload_identity_provider: ${{ inputs.nais_workload_identity_provider }}
        service_account: ${{ env.SA_EMAIL }}
        token_format: "access_token"

    - name: "Handle authentication failure"
      if: ${{ failure() && steps.auth.outcome == 'failure' }}
      shell: bash
      run: |
        cat <<EOF
        ::error ::Failed to authenticate to Google Cloud.
        EOF

        echo "Ensure that your team has write access to the Github-repository." >> $GITHUB_STEP_SUMMARY
        echo "Ensure that you grant the following permissions in your workflow:" >> $GITHUB_STEP_SUMMARY
        echo '```yaml' >> $GITHUB_STEP_SUMMARY
        echo "permissions:" >> $GITHUB_STEP_SUMMARY
        echo "   contents: read" >> $GITHUB_STEP_SUMMARY
        echo "   id-token: write" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    # Upload files to Google Cloud Storage Bucket connected to CDN
    - id: "upload-file"
      uses: "google-github-actions/upload-cloud-storage@v2"
      with:
        path: "${{ inputs.source }}"
        parent: "true"
        destination: "${{ env.BUCKET_NAME }}/${{ inputs.team-name }}/${{ inputs.destination }}"

    # Invalidate cache if cache-invalidation is set to true
    - name: "Set up Cloud SDK"
      if: ${{ inputs.cache-invalidation == 'true' || inputs.no-cache-paths != '' }}
      uses: "google-github-actions/setup-gcloud@v1"
    - name: "Invalidating cache"
      if: ${{ inputs.cache-invalidation == 'true' }}
      shell: bash
      run: |
        path="/${{ inputs.team-name }}/${{ inputs.destination }}"
        path="${path%/}/*"

        gcloud compute url-maps invalidate-cdn-cache ${{ env.LOGICAL_NAME }} --global --async --path $path
    - if: ${{ inputs.cache-invalidation == 'true' }}
      shell: bash
      run: |
        path="/${{ inputs.team-name }}/${{ inputs.destination }}"
        path="${path%/}/*"

        base_url="https://console.cloud.google.com/net-services/loadbalancing/details/httpAdvanced"
        console_url="$base_url/${{ env.LOGICAL_NAME }}?project=${{ inputs.nais_management_project_id }}"

        echo "### CDN Cache Invalidation" >> $GITHUB_STEP_SUMMARY
        echo "Path: \`$path\`" >> $GITHUB_STEP_SUMMARY
        echo "Cache invalidation is running in the background. It may take up to `15 minutes` \
              before the cache is invalidated. You can check the status of the invalidation in \
              [Google Cloud Console]($console_url) â†’ Caching." >> $GITHUB_STEP_SUMMARY

    - name: Set no-cache metadata
      if: ${{ inputs.no-cache-paths != '' }}
      shell: bash
      run: |
        paths=(${{ inputs.no-cache-paths }})
        IFS=','

        for path in $paths; do
          gsutil setmeta -h "Cache-Control:no-store" "gs://${BUCKET_NAME}/${{ inputs.team-name }}/$path"
        done
